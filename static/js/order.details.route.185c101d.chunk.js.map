{"version":3,"file":"static/js/order.details.route.185c101d.chunk.js","mappings":"8QA4EA,UA7DA,WAAgC,IAAD,EAC7B,GAAwBA,EAAAA,EAAAA,MAAhBC,OACAC,QADR,MAAiB,GAAjB,GACQA,QACAC,GAAsBC,EAAAA,EAAAA,KAAtBD,kBACR,GAA4BE,EAAAA,EAAAA,IAAkBH,EAAS,CACrDI,QADqD,SAC7CC,GACNJ,EAAkBI,EAAK,6BAFnBC,EAAR,EAAQA,KAMR,OANA,EAAcC,WAMQ,SAAC,IAAD,KAGpB,SAAC,IAAD,WACE,UAAC,IAAD,CAAgBC,UAAWC,EAAAA,EAA3B,WACE,SAAC,IAAD,CAAYC,GAAI,CAAEC,KAAM,WAAYC,EAAG,GAAKC,QAAQ,KAApD,4BAIA,UAAC,IAAD,CAAOH,GAAI,CAAEI,MAAO,GAApB,WACE,SAAC,IAAD,WACE,UAAC,IAAD,CAAUJ,GAAI,CAAE,OAAQ,CAAEK,SAAU,KAApC,WACE,SAAC,IAAD,oBACA,SAAC,IAAD,0BACA,SAAC,IAAD,oBACA,SAAC,IAAD,2BAGJ,UAAC,IAAD,kBACGT,QADH,IACGA,GADH,UACGA,EAAMU,aADT,aACG,EAAaC,KAAI,SAACC,GAAD,eAChB,UAAC,IAAD,CAAUC,OAAK,EAAoBT,GAAI,CAAE,kBAAmB,CAAEU,OAAQ,GAAK,OAAQ,CAAEL,SAAU,KAA/F,WACE,SAAC,IAAD,iBAAYG,QAAZ,IAAYA,GAAZ,UAAYA,EAAWG,eAAvB,aAAY,EAAoBC,QAChC,SAAC,IAAD,WAAYC,EAAAA,EAAAA,IAAW,OAACL,QAAD,IAACA,GAAD,UAACA,EAAWG,eAAZ,aAAC,EAAoBG,UAC5C,SAAC,IAAD,iBAAYN,QAAZ,IAAYA,OAAZ,EAAYA,EAAWO,UACvB,SAAC,IAAD,WAAYC,EAAAA,EAAAA,IAA8BR,OAJvBA,EAAUS,QAOjC,UAAC,IAAD,CAAUjB,GAAI,CAAE,OAAQ,CAAEK,SAAU,GAAIa,WAAY,MAApD,WACE,SAAC,IAAD,CAAWC,QAAS,EAAGC,QAAS,KAChC,SAAC,IAAD,wBACA,SAAC,IAAD,UAAYxB,GAAOyB,EAAAA,EAAAA,IAA6BzB,IAAQiB,EAAAA,EAAAA,IAAY,SAEtE,UAAC,IAAD,CAAUb,GAAI,CAAE,OAAQ,CAAEK,SAAU,GAAIa,WAAY,MAApD,WACE,SAAC,IAAD,qBACA,SAAC,IAAD,UAAYtB,GAAOyB,EAAAA,EAAAA,IAA6BzB,IAAQiB,EAAAA,EAAAA,IAAY,SAEtE,UAAC,IAAD,CAAUb,GAAI,CAAE,OAAQ,CAAEK,SAAU,GAAIa,WAAY,MAApD,WACE,SAAC,IAAD,oBACA,SAAC,IAAD,WACE,SAAC,IAAD,CAAYlB,GAAI,CAAEK,SAAU,GAAIa,WAAY,KAA5C,UACGI,EAAAA,EAAAA,IAAoB,OAAC1B,QAAD,IAACA,OAAD,EAACA,EAAM2B","sources":["routes/Orders/[OrderId]/OrderDetails.tsx"],"sourcesContent":["import { useMatch } from 'react-location'\nimport { Paper, Table, TableRow, TableBody, TableCell, TableHead, Typography, TableContainer } from '@mui/material'\n\nimport { useOrderByIdQuery } from '../../../stores/ordersStore'\nimport { useSnackbar } from '../../../components/containers/SnackbarContainer'\nimport {\n  getCurrency,\n  toShortLocalDateTime,\n  getOrderItemTotalWithCurrency,\n  getOrderSubTotalWithCurrency,\n} from '../../../helpers/utils'\n\nimport Loading from '../../../components/layout/Loading'\nimport MainLayout from '../../../components/layout/MainLayout'\n\nfunction Orders(): JSX.Element {\n  const { params = {} } = useMatch()\n  const { orderId } = params\n  const { openErrorSnackbar } = useSnackbar()\n  const { data, isLoading } = useOrderByIdQuery(orderId, {\n    onError(err) {\n      openErrorSnackbar(err, 'Fetching order failed!')\n    },\n  })\n\n  if (isLoading) return <Loading />\n\n  return (\n    <MainLayout>\n      <TableContainer component={Paper}>\n        <Typography sx={{ flex: '1 1 100%', p: 2 }} variant=\"h6\">\n          Order History\n        </Typography>\n\n        <Table sx={{ width: 1 }}>\n          <TableHead>\n            <TableRow sx={{ '& th': { fontSize: 17 } }}>\n              <TableCell>Type</TableCell>\n              <TableCell>Unit Price</TableCell>\n              <TableCell>Qty.</TableCell>\n              <TableCell>Price </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data?.items?.map((orderItem) => (\n              <TableRow hover key={orderItem.id} sx={{ '&:last-child td': { border: 0 }, '& td': { fontSize: 16 } }}>\n                <TableCell>{orderItem?.product?.type}</TableCell>\n                <TableCell>{getCurrency(orderItem?.product?.price)}</TableCell>\n                <TableCell>{orderItem?.amount}</TableCell>\n                <TableCell>{getOrderItemTotalWithCurrency(orderItem)}</TableCell>\n              </TableRow>\n            ))}\n            <TableRow sx={{ '& td': { fontSize: 17, fontWeight: 700 } }}>\n              <TableCell colSpan={2} rowSpan={3} />\n              <TableCell>Subtotal</TableCell>\n              <TableCell>{data ? getOrderSubTotalWithCurrency(data) : getCurrency(0)}</TableCell>\n            </TableRow>\n            <TableRow sx={{ '& td': { fontSize: 18, fontWeight: 800 } }}>\n              <TableCell>Total</TableCell>\n              <TableCell>{data ? getOrderSubTotalWithCurrency(data) : getCurrency(0)}</TableCell>\n            </TableRow>\n            <TableRow sx={{ '& td': { fontSize: 18, fontWeight: 800 } }}>\n              <TableCell>Date</TableCell>\n              <TableCell>\n                <Typography sx={{ fontSize: 18, fontWeight: 600 }}>\n                  {toShortLocalDateTime(data?.placementTimestamp)}\n                </Typography>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </MainLayout>\n  )\n}\n\nexport default Orders\n"],"names":["useMatch","params","orderId","openErrorSnackbar","useSnackbar","useOrderByIdQuery","onError","err","data","isLoading","component","Paper","sx","flex","p","variant","width","fontSize","items","map","orderItem","hover","border","product","type","getCurrency","price","amount","getOrderItemTotalWithCurrency","id","fontWeight","colSpan","rowSpan","getOrderSubTotalWithCurrency","toShortLocalDateTime","placementTimestamp"],"sourceRoot":""}